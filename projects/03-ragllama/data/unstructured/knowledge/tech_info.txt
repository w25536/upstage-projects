# 기술 정보 데이터베이스

## Python
카테고리: 프로그래밍 언어
설명: Python은 1991년 귀도 반 로섬이 개발한 고급 프로그래밍 언어입니다. 간결하고 읽기 쉬운 문법으로 초보자부터 전문가까지 널리 사용됩니다.
주요 용도: 웹 개발(Django, Flask), 데이터 분석(Pandas, NumPy), 머신러닝(TensorFlow, PyTorch), 자동화, 스크립팅
장점: 배우기 쉬움, 방대한 라이브러리 생태계, 커뮤니티 지원 우수, 크로스 플랫폼
단점: 실행 속도가 느림, 모바일 개발 제한적, GIL로 인한 멀티스레딩 제약
현재 트렌드: AI/ML 분야에서 지배적 위치, FastAPI로 백엔드 개발 증가

## JavaScript
카테고리: 프로그래밍 언어
설명: 웹 브라우저에서 실행되는 스크립트 언어로, 현재는 Node.js를 통해 서버 사이드에서도 사용됩니다.
주요 용도: 프론트엔드 개발(React, Vue, Angular), 백엔드 개발(Node.js, Express), 모바일 앱(React Native)
장점: 웹 표준, 비동기 처리 우수, 풀스택 개발 가능, 활발한 생태계
단점: 브라우저 호환성 이슈, 타입 안정성 부족(TypeScript로 보완)
현재 트렌드: TypeScript 채택 증가, Next.js/Remix 같은 풀스택 프레임워크 인기

## React
카테고리: 프론트엔드 프레임워크
설명: Facebook이 개발한 UI 라이브러리로, 컴포넌트 기반 개발을 통해 재사용 가능한 UI를 구축합니다.
주요 용도: 웹 애플리케이션 개발, SPA(Single Page Application)
장점: 컴포넌트 재사용성, Virtual DOM으로 높은 성능, 방대한 생태계
단점: 러닝 커브, 빠른 버전 업데이트
현재 트렌드: React Server Components, Next.js와 결합한 풀스택 개발

## Node.js
카테고리: 런타임 환경
설명: Chrome V8 엔진 기반의 JavaScript 런타임으로, 서버 사이드 JavaScript 실행을 가능하게 합니다.
주요 용도: 백엔드 API 서버, 실시간 애플리케이션, 마이크로서비스
장점: 비동기 I/O, 높은 처리량, JavaScript로 풀스택 개발
단점: CPU 집약적 작업에 부적합, 콜백 지옥
현재 트렌드: Express에서 Fastify/NestJS로 전환, 서버리스 환경 채택

## Docker
카테고리: 컨테이너 기술
설명: 애플리케이션을 컨테이너로 패키징하여 어디서나 동일하게 실행할 수 있게 하는 플랫폼입니다.
주요 용도: 개발 환경 표준화, 마이크로서비스 배포, CI/CD 파이프라인
장점: 환경 일관성, 빠른 배포, 리소스 효율성
단점: 학습 곡선, 보안 관리 필요
현재 트렌드: Kubernetes와 결합한 오케스트레이션, Docker Compose 개선

## Kubernetes
카테고리: 컨테이너 오케스트레이션
설명: 컨테이너화된 애플리케이션의 배포, 확장, 관리를 자동화하는 오픈소스 플랫폼입니다.
주요 용도: 대규모 컨테이너 관리, 자동 스케일링, 로드 밸런싱
장점: 자동 복구, 서비스 디스커버리, 선언적 구성
단점: 높은 복잡도, 학습 난이도
현재 트렌드: Helm 차트, Istio 서비스 메시, GitOps

## AWS
카테고리: 클라우드 플랫폼
설명: Amazon의 클라우드 컴퓨팅 서비스로, 200개 이상의 서비스를 제공합니다.
주요 용도: 서버 호스팅(EC2), 데이터베이스(RDS), 스토리지(S3), 서버리스(Lambda)
장점: 광범위한 서비스, 글로벌 인프라, 높은 가용성
단점: 복잡한 가격 체계, 벤더 종속성
현재 트렌드: 서버리스 아키텍처, AI/ML 서비스 확장

## TypeScript
카테고리: 프로그래밍 언어
설명: Microsoft가 개발한 JavaScript의 상위 집합으로, 정적 타입을 추가한 언어입니다.
주요 용도: 대규모 JavaScript 프로젝트, 프론트엔드/백엔드 개발
장점: 타입 안정성, IDE 지원 우수, 리팩토링 용이
단점: 컴파일 단계 필요, 추가 학습 비용
현재 트렌드: JavaScript 프로젝트의 표준화, Deno/Bun 런타임 지원

## PostgreSQL
카테고리: 데이터베이스
설명: 강력한 오픈소스 관계형 데이터베이스로, ACID 트랜잭션과 확장성을 제공합니다.
주요 용도: 웹 애플리케이션 데이터 저장, 데이터 분석, JSON 문서 저장
장점: 표준 SQL 지원, JSONB 지원, 확장성, 무료
단점: 복잡한 설정, MySQL보다 느린 쓰기 성능
현재 트렌드: Supabase 같은 BaaS, 벡터 검색 확장(pgvector)

## Redis
카테고리: 인메모리 데이터베이스
설명: 메모리 기반의 키-값 저장소로, 캐싱과 세션 관리에 주로 사용됩니다.
주요 용도: 캐싱, 세션 저장, 실시간 리더보드, 메시지 큐
장점: 매우 빠른 속도, 다양한 데이터 구조, Pub/Sub 지원
단점: 메모리 제약, 데이터 영속성 제한적
현재 트렌드: Redis Stack(검색, JSON 지원), Redis Cluster 확장